mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1/9/2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, now())
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds - 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
now( tzone = "America/New_York")
now("America/New_York"
)
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
update(depart, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrivce
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
exit()
Exit()
rm(list = ls())
windows()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(maps)
install.packages("maps")
install.packages(mapdata)
install.packages("mapdata")
install.packages("ggmap")
library("ggmap")
citation('ggmap')
library(mapstools)
library(maptools)
install.packages("maptools")
library(maptools)
gpclibPermit()
library(maps)
map("world", fill = TRUE, col = "white", bg = "lightblue")
?map
map("world", fill = TRUE, col = "white", bg = "lightblue", regions = africa)
map("world", fill = TRUE, col = "white", bg = "lightblue", regions = "africa")
map("world", fill = TRUE, col = "white", bg = "lightblue", regions = "Africa")
map("world", fill = TRUE, col = "white", bg = "lightblue")
map("world", fill = TRUE, col = "white", bg = "blue")
map("world", fill = TRUE, col = "white", bg = "lightred")
map("world", fill = TRUE, col = "white", bg = "red")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
str(mpg)
image(volcano)
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
pnorm(70, mean = 80, sd = 10, upper.tail=FALSE)
pnorm(70, mean = 80, sd = 10)
pnorm(70, mean = 80, sd = 10, lower.tail=FALSE)
pnorm(1247,mean=1100,sd=70)
pnorm(1175,mean=1100,sd=70)
pnorm(1223,mean=1100,sd=70)
qnorm(0.95, mean=1100, sd = 75)
pbinom(4, size=5, prob=0.5)
poisson.test(10,5)
?class(binom())
class(binom())
ppoisson()
poisson.test()
class(poisson.test)
unclass(poisson.test)
ppois(10, lambda = 15)
choose(8,7)*.5^8 + choose(8,8)*.5^8
choose(5,4)*.5^5 + choose(5,5)*.5^5
choose(4,5)*.5^5 + choose(5,5)*.5^5
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Loading the relevant pacakges...
```{r, results="hide"}
library(dplyr)
library(ggplot2)
library(lubridate)
```
Setting the working directory to where the data has been downloaded to
(this should also be the directory that you clone to GitHub if you are doing that)
```{r}
setwd("C:/Users/twilson/Desktop/R/R_Crse/5rr/cp1/RepData_PeerAssessment1")
```
Loading the data in a format that can be used by dplyr (a very helpful data manipulation package)
```{r}
data <- tbl_df(read.csv("activity.csv"))
```
## What is mean total number of steps taken per day?
Code to create histogram:
```{r}
data <- mutate(data, date = ymd(date))
data_1 <- group_by(data, date)
data_1 <- tbl_df(summarise(data_1, sum(steps)))
colnames(data_1)[2] <- "steps"
hist(data_1$steps, xlab = "Steps", main = "Histogram of steps per day", ylab = "Count")
```
Using the following code, we can calculate that...
```{r}
meanday <- mean(data_1$steps, na.rm = TRUE)
medianday <- median(data_1$steps, na.rm = TRUE)
```
The mean of steps per day is:
```{r}
meanday
```
And the median of steps per day is:
```{r}
medianday
```
## What is the average daily activity pattern?
This code prepares the data to calculate the answer to this question:
```{r}
data_2 <- group_by(data, interval) #arranging the data by interval
data_2 <- summarise(data_2, mean(steps, na.rm=TRUE)) #averaging for each interval
colnames(data_2)[2] <- "Average_Steps" #renaming the column of the new dataframe
```
This code generates the graph:
```{r}
plot(data_2$interval, data_2$Average_Steps, type = "l")
```
This code prepares the data to identify the interval with the highest number of steps taken:
```{r}
data_2_s <- data_2[order(-data_2$Average_Steps, na.last=TRUE),]
```
The interval with the highest average steps is:
```{r}
data_2_s[1,1]
```
## Imputing missing values
There are many missing values in this dataset.
In particular, there are the following number of missing values:
```{r}
sum(is.na(data$steps))
```
Using the data calculated in the previous question, we replace those missing values with the average value for that interval calculated using observations from other days when the data was not missing.
```{r}
for (i in seq_len(nrow(data))) {
if (is.na(data$steps[i]) == "TRUE"){
data$steps[i] <- as.numeric(data_2[which(data_2$interval==as.numeric(data[i,3])),2])
}
else
{data$steps[i] <- data$steps[i]}
}
```
Now we calaculate the average steps per day using this new data
```{r}
data <- group_by(data, date)
data <- tbl_df(summarise(data, sum(steps)))
colnames(data)[2] <- "steps"
```
We can now generate a histogram with this new data
```{r}
hist(data_1$steps, xlab = "Steps", main = "Histogram of steps per day with missing values replaced", ylab = "Count")
```
You will notice that the new data includes many more zero observations.
This is because the observations which were missing tended to be observations from intervals that had an average of zero.
This makes sense - it is probably when the subject was sleeping.
To following code prepares the data to calculate the new mean of our new data.
```{r}
meanday2 <- mean(data$steps, na.rm = TRUE)
medianday2 <- median(data$steps, na.rm = TRUE)
```
The mean of steps per day with the missing data filled in is
```{r}
meanday2
```
And the median of steps per day with the missing data filled in is
```{r}
medianday2
```
The difference of inputting the missing values is as follows for the mean:
```{r}
meanday2 - meanday
```
and for the median
```{r}
medianday2 - medianday
```
## Are there differences in activity patterns between weekdays and weekends?
The following code adjusts the data to highlight whether the observation took place during a weekday or not...
```{r}
data_4 <- mutate(data, day = weekdays(date)) #adds a column with the day of the week on it
data_4["Weekday"] <- NA
for (i in seq_len(nrow(data))) {
if (sum(data_4$day[i] == c("Monday","Tuesday","Wednesday", "Thursday", "Friday")) == 1)
{data_4$Weekday[i] <- "TRUE"}
else
{data_4$Weekday[i] <- "FALSE"}
}
```
The following code adjusts the data and then produces a panel plot so that we can compare the average steps during each interval for weekdays versus weekends.
```{r}
data_5 <- data_4[which(data_4$Weekday=="TRUE"),1:4]
data_5 <- group_by(data_5, data_5$interval)
data_5 <- summarise(data_5, mean(steps, na.rm=TRUE))
colnames(data_5)[2] <- "Average_Steps"
data_6 <- data_4[which(data_4$Weekday=="FALSE"),1:5]
data_6 <- group_by(data_6, interval)
data_6 <- summarise(data_6, mean(steps, na.rm=TRUE))
colnames(data_6)[2] <- "Average_Steps"
par(mfrow=c(2,1))
plot(x=data_5$interval, data_5$Average_Steps, type = "l",
xlab = "Interval", ylab = "Steps", main = "Weekday",
cex.main = 0.8)
plot(x=data_6$interval, data_6$Average_Steps, type = "l",
xlab = "Interval", ylab = "Steps", main = "Weekend",
cex.main = 0.8)
```
As you can see, this person takes a much higher number of steps during the morning on a weekday than a weekend.  Perhaps they walk to work? ...
View(data_4)
View(data_4)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Loading the relevant pacakges...
```{r, results="hide"}
library(dplyr)
library(ggplot2)
library(lubridate)
```
Setting the working directory to where the data has been downloaded to
(this should also be the directory that you clone to GitHub if you are doing that)
```{r}
setwd("C:/Users/twilson/Desktop/R/R_Crse/5rr/cp1/RepData_PeerAssessment1")
```
Loading the data in a format that can be used by dplyr (a very helpful data manipulation package)
```{r}
data <- tbl_df(read.csv("activity.csv"))
```
## What is mean total number of steps taken per day?
Code to create histogram:
```{r}
data <- mutate(data, date = ymd(date))
data_1 <- group_by(data, date)
data_1 <- tbl_df(summarise(data_1, sum(steps)))
colnames(data_1)[2] <- "steps"
hist(data_1$steps, xlab = "Steps", main = "Histogram of steps per day", ylab = "Count")
```
Using the following code, we can calculate that...
```{r}
meanday <- mean(data_1$steps, na.rm = TRUE)
medianday <- median(data_1$steps, na.rm = TRUE)
```
The mean of steps per day is:
```{r}
meanday
```
And the median of steps per day is:
```{r}
medianday
```
## What is the average daily activity pattern?
This code prepares the data to calculate the answer to this question:
```{r}
data_2 <- group_by(data, interval) #arranging the data by interval
data_2 <- summarise(data_2, mean(steps, na.rm=TRUE)) #averaging for each interval
colnames(data_2)[2] <- "Average_Steps" #renaming the column of the new dataframe
```
This code generates the graph:
```{r}
plot(data_2$interval, data_2$Average_Steps, type = "l",
main="Average steps per interval",
xlab="Interval",
ylab="Steps")
```
This code prepares the data to identify the interval with the highest number of steps taken:
```{r}
data_2_s <- data_2[order(-data_2$Average_Steps, na.last=TRUE),]
```
The interval with the highest average steps is:
```{r}
data_2_s[1,1]
```
## Imputing missing values
There are many missing values in this dataset.
In particular, there are the following number of missing values:
```{r}
sum(is.na(data$steps))
```
Using the data calculated in the previous question, we replace those missing values with the average value for that interval calculated using observations from other days when the data was not missing.
```{r}
data_flld <- data
for (i in seq_len(nrow(data_flld))) {
if (is.na(data_flld$steps[i]) == "TRUE"){
data_flld$steps[i] <- as.numeric(data_2[which(data_2$interval==as.numeric(data_flld[i,3])),2])
}
else
{data_flld$steps[i] <- data_flld$steps[i]}
}
```
Now we calaculate the average steps per day using this new data
```{r}
data_flld <- group_by(data, date)
data_flld <- tbl_df(summarise(data_flld, sum(steps)))
colnames(data_flld)[2] <- "steps"
```
We can now generate a histogram with this new data
```{r}
hist(data_flld$steps, xlab = "Steps", main = "Histogram of steps per day with missing values replaced", ylab = "Count")
```
To following code prepares the data to calculate the new mean of our new data.
```{r}
meanday2 <- mean(data$steps, na.rm = TRUE)
medianday2 <- median(data$steps, na.rm = TRUE)
```
The mean of steps per day with the missing data filled in is
```{r}
meanday2
```
And the median of steps per day with the missing data filled in is
```{r}
medianday2
```
The difference of inputting the missing values is as follows for the mean:
```{r}
meanday2 - meanday
```
and for the median
```{r}
medianday2 - medianday
```
## Are there differences in activity patterns between weekdays and weekends?
The following code adjusts the data to highlight whether the observation took place during a weekday or not...
```{r}
data_4 <- mutate(data, day = weekdays(date)) #adds a column with the day of the week on it
data_4["Weekday"] <- NA
for (i in seq_len(nrow(data))) {
if (sum(data_4$day[i] == c("Monday","Tuesday","Wednesday", "Thursday", "Friday")) == 1)
{data_4$Weekday[i] <- "TRUE"}
else
{data_4$Weekday[i] <- "FALSE"}
}
```
The following code adjusts the data and then produces a panel plot so that we can compare the average steps during each interval for weekdays versus weekends.
```{r}
data_5 <- data_4[which(data_4$Weekday=="TRUE"),1:4]
data_5 <- group_by(data_5, interval)
data_5 <- summarise(data_5, mean(steps, na.rm=TRUE))
colnames(data_5)[2] <- "Average_Steps"
data_6 <- data_4[which(data_4$Weekday=="FALSE"),1:5]
data_6 <- group_by(data_6, interval)
data_6 <- summarise(data_6, mean(steps, na.rm=TRUE))
colnames(data_6)[2] <- "Average_Steps"
par(mfrow=c(2,1))
plot(x=data_5$interval, data_5$Average_Steps, type = "l",
xlab = "Interval", ylab = "Steps", main = "Weekday",
cex.main = 0.8)
plot(x=data_6$interval, data_6$Average_Steps, type = "l",
xlab = "Interval", ylab = "Steps", main = "Weekend",
cex.main = 0.8)
```
As you can see, this person takes a much higher number of steps during the morning on a weekday than a weekend.  Perhaps they walk to work? ...
View(data_flld)
data_flld$steps
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Loading the relevant pacakges...
```{r, results="hide"}
library(dplyr)
library(ggplot2)
library(lubridate)
```
Setting the working directory to where the data has been downloaded to
(this should also be the directory that you clone to GitHub if you are doing that)
```{r}
setwd("C:/Users/twilson/Desktop/R/R_Crse/5rr/cp1/RepData_PeerAssessment1")
```
Loading the data in a format that can be used by dplyr (a very helpful data manipulation package)
```{r}
data <- tbl_df(read.csv("activity.csv"))
```
## What is mean total number of steps taken per day?
Code to create histogram:
```{r}
data <- mutate(data, date = ymd(date))
data_1 <- group_by(data, date)
data_1 <- tbl_df(summarise(data_1, sum(steps)))
colnames(data_1)[2] <- "steps"
hist(data_1$steps, xlab = "Steps", main = "Histogram of steps per day", ylab = "Count")
```
Using the following code, we can calculate that...
```{r}
meanday <- mean(data_1$steps, na.rm = TRUE)
medianday <- median(data_1$steps, na.rm = TRUE)
```
The mean of steps per day is:
```{r}
meanday
```
And the median of steps per day is:
```{r}
medianday
```
## What is the average daily activity pattern?
This code prepares the data to calculate the answer to this question:
```{r}
data_2 <- group_by(data, interval) #arranging the data by interval
data_2 <- summarise(data_2, mean(steps, na.rm=TRUE)) #averaging for each interval
colnames(data_2)[2] <- "Average_Steps" #renaming the column of the new dataframe
```
This code generates the graph:
```{r}
plot(data_2$interval, data_2$Average_Steps, type = "l",
main="Average steps per interval",
xlab="Interval",
ylab="Steps")
```
This code prepares the data to identify the interval with the highest number of steps taken:
```{r}
data_2_s <- data_2[order(-data_2$Average_Steps, na.last=TRUE),]
```
The interval with the highest average steps is:
```{r}
data_2_s[1,1]
```
## Imputing missing values
There are many missing values in this dataset.
In particular, there are the following number of missing values:
```{r}
sum(is.na(data$steps))
```
Using the data calculated in the previous question, we replace those missing values with the average value for that interval calculated using observations from other days when the data was not missing.
```{r}
data_flld <- data
for (i in seq_len(nrow(data_flld))) {
if (is.na(data_flld$steps[i]) == "TRUE"){
data_flld$steps[i] <- as.numeric(data_2[which(data_2$interval==as.numeric(data_flld[i,3])),2])
}
else
{data_flld$steps[i] <- data_flld$steps[i]}
}
View(data_flld)
data_flld <- group_by(data_filld, date)
data_flld <- tbl_df(summarise(data_flld, sum(steps)))
colnames(data_flld)[2] <- "steps"
data_filld
data_flld
data_flld <- data
for (i in seq_len(nrow(data_flld))) {
if (is.na(data_flld$steps[i]) == "TRUE"){
data_flld$steps[i] <- as.numeric(data_2[which(data_2$interval==as.numeric(data_flld[i,3])),2])
}
else
{data_flld$steps[i] <- data_flld$steps[i]}
}
View(data_flld)
data_flld <- group_by(data_filld, date)
data_flld <- group_by(data_flld, date)
data_flld <- tbl_df(summarise(data_flld, sum(steps)))
colnames(data_flld)[2] <- "steps"
hist(data_flld$steps, xlab = "Steps", main = "Histogram of steps per day with missing values replaced", ylab = "Count")
meanday2 <- mean(data_flld$steps, na.rm = TRUE)
medianday2 <- median(data_flld$steps, na.rm = TRUE)
meanday2
medianday2
meanday2 - meanday
medianday2 - medianday
data_2_s[1,1]
